function formatNumber(n) {
    return (n < 10 ? '0' + n : n)
};

function currency(price, type, symbol) {
    type = type || 'float';
    symbol = symbol !== undefined ? ',' : '';
    var val = Math.abs(price).toFixed(2);
    var reg = getRegExp('(\x5cd)(?\x3d(\x5cd{3})+\x5c.)', ['g']);
    var _fn = (function(v1, v2) {
        return (v2 + symbol)
    });
    val = !!symbol ? val.replace(reg, _fn) : val;
    return (type === 'float' ? val : val.split('.')[(0)])
};

function add_comma_toThousands(num) {
    let;
    isFloat = false, floatNum = 0;
    if (num != parseInt(num)) {
        num = currency(num);
        isFloat = true
    };
    if (isFloat) {
        let;
        arr = num.toString().split('.');
        console.log(arr);
        num = arr[(0)];
        floatNum = arr[(1)]
    };
    var num = (num || 0).toString();
    var result = '';
    while (num.length > 3) {
        result = ',' + num.slice(-3) + result;
        num = num.slice(0, num.length - 3)
    };
    if (num) {
        result = num + result + (isFloat ? '.' + floatNum : '')
    };
    return (result)
};

function timeParse(timeNum, param, lang) {
    lang = lang || '-';
    timeNum = timeNum.toString();
    var year = timeNum.substring(0, 4);
    var month = timeNum.substring(4, 6);
    var day = timeNum.substring(6, 8);
    var h = timeNum.substring(8, 10);
    var m = timeNum.substring(10, 12);
    var s = timeNum.substring(12, 14);
    var d = [year, month, day];
    var t = [h, m, s];
    var rst = '';
    switch (param) {
        case 'yyyy-mm-dd hh:mm:ss.S':
            rst = (lang === 'ZH_CN' ? (d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日') : (d.join(lang))) + ' ' + t.join(':') + ' ' + ms;
            break;
        case 'yyyy-mm-dd hh:mm:ss':
            rst = (lang === 'ZH_CN' ? d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日' : d.join(lang)) + ' ' + t.join(':');
            break;
        case 'yyyy-mm-dd hh:mm':
            rst = (lang === 'ZH_CN' ? d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日' : d.join(lang)) + ' ' + [t[(0)], t[(1)]].join(':');
            break;
        case 'yyyy':
            rst = lang === 'ZH_CN' ? d[(0)] + '年' : d[(0)];
            break;
        case 'yyyy-mm':
            rst = lang === 'ZH_CN' ? d[(0)] + '年' + d[(1)] + '月' : [d[(0)], d[(1)]].join(lang);
            break;
        case 'mm-dd':
            rst = lang === 'ZH_CN' ? d[(1)] + '月' + d[(2)] + '日' : [d[(1)], d[(2)]].join(lang);
            break;
        case 'mm-dd hh:mm':
            rst = (lang === 'ZH_CN' ? d[(1)] + '月' + d[(2)] + '日' : [d[(1)], d[(2)]].join(lang)) + ' ' + [t[(0)], t[(1)]].join(':');
            break;
        case 'yyyy-mm-dd':
            rst = lang === 'ZH_CN' ? d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日' : d.join(lang);
            break;
        case 'hh:mm':
            rst = [t[(0)], t[(1)]].join(':');
            break;
        case 'hh:mm:ss':
            rst = t.join(':');
            break;
        default:
            rst = (lang === 'ZH_CN' ? (d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日') : d.join(lang)) + ' ' + t.join(':');
            break;
    };
    return (rst)
};

function formatTime(date, param, lang) {
    lang = lang || '-';
    date = getDate(date);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    var second = date.getSeconds();
    var ms = date.getMilliseconds();
    var d = [year, month, day].map(formatNumber);
    var t = [hour, minute, second].map(formatNumber);
    var rst = '';
    switch (param) {
        case 'yyyy-mm-dd hh:mm:ss.S':
            rst = (lang === 'ZH_CN' ? (d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日') : (d.join(lang))) + ' ' + t.join(':') + ' ' + ms;
            break;
        case 'yyyy-mm-dd hh:mm:ss':
            rst = (lang === 'ZH_CN' ? d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日' : d.join(lang)) + ' ' + t.join(':');
            break;
        case 'yyyy-mm-dd hh:mm':
            rst = (lang === 'ZH_CN' ? d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日' : d.join(lang)) + ' ' + [t[(0)], t[(1)]].join(':');
            break;
        case 'yyyy':
            rst = lang === 'ZH_CN' ? d[(0)] + '年' : d[(0)];
            break;
        case 'yyyy-mm':
            rst = lang === 'ZH_CN' ? d[(0)] + '年' + d[(1)] + '月' : [d[(0)], d[(1)]].join(lang);
            break;
        case 'mm-dd':
            rst = lang === 'ZH_CN' ? d[(1)] + '月' + d[(2)] + '日' : [d[(1)], d[(2)]].join(lang);
            break;
        case 'mm-dd hh:mm':
            rst = (lang === 'ZH_CN' ? d[(1)] + '月' + d[(2)] + '日' : [d[(1)], d[(2)]].join(lang)) + ' ' + [t[(0)], t[(1)]].join(':');
            break;
        case 'yyyy-mm-dd':
            rst = lang === 'ZH_CN' ? d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日' : d.join(lang);
            break;
        case 'hh:mm':
            rst = [t[(0)], t[(1)]].join(':');
            break;
        case 'hh:mm:ss':
            rst = t.join(':');
            break;
        default:
            rst = (lang === 'ZH_CN' ? d[(0)] + '年' + d[(1)] + '月' + d[(2)] + '日' : d.join(lang)) + ' ' + t.join(':');
            break;
    };
    return (rst)
};

function format_D_H_M_S(sec, type, isFormat) {
    type = type || 'day';
    var dUnit = 3600 * 24;
    var d = type === 'day' ? parseInt(sec / dUnit) : '';
    var _diff = sec - ((d || 0) * dUnit);
    var h = type === 'day' ? parseInt(_diff / 3600) : parseInt(sec / 3600);
    var m = parseInt(_diff % 3600 / 60);
    var s = parseInt(_diff % 60);
    h = isFormat ? formatNumber(h) : h;
    m = isFormat ? formatNumber(m) : m;
    s = isFormat ? formatNumber(s) : s;
    return (type === 'day' ? {
        d,
        h,
        m,
        s
    } : {
        h,
        m,
        s
    })
};

function formate_picker_date(val) {
    console.log("val----------", val);
    if (val) {
        let;
        dates = val.split("-");
        console.log("dates----------", dates);
        let;
        dateStr = dates[(0)] + '年' + dates[(1)] + '月' + dates[(2)] + '日';
        return (dateStr)
    }
};

function odd_spu(val1, val2) {
    console.log('odd_spu.val1--------------\x3e', val1);
    console.log('odd_spu.val2--------------\x3e', val2);
    var data = parseInt(val1 / 2);
    return ((data - val2) * 22 - 90)
};

function even_spu(val1, val2) {
    console.log('even_spu.val1--------------\x3e', val1);
    console.log('even_spu.val2--------------\x3e', val2);
    if (val1 >= 6) {
        return ((val1 / 2 - val2 - 1) * 18 + 9 - 90)
    } else {
        return ((val1 / 2 - val2 - 1) * 22 + 11 - 90)
    }
};

function currentIndex(index, length) {
    console.log("index,length", index, length);
    if (index >= length) {
        console.log("index\x3e\x3d length-----");
        return (index % length)
    } else if (0 <= index && index < length) {
        console.log("0\x3c\x3dindex\x3clength");
        return (index)
    } else {
        if (Math.abs(index) % length) {
            return (length - ((Math.abs(index)) % length))
        } else {
            return (0)
        }
    }
};

function getProIndex(direction, currentIndex, data) {
    var proIndex = null;
    if (!direction) {
        return ("-1")
    };
    if (direction == 'left') {
        if (currentIndex == 0) {
            proIndex = data.length - 1
        } else {
            proIndex = currentIndex - 1
        }
    } else {
        if (currentIndex == data.length - 1) {
            proIndex = 0
        } else {
            proIndex = currentIndex + 1
        }
    };
    console.log('proIndex--------', proIndex);
    return (proIndex)
};
module.exports = ({
    currency: currency,
    add_comma_toThousands: add_comma_toThousands,
    format_D_H_M_S: format_D_H_M_S,
    formatTime: formatTime,
    timeParse: timeParse,
    formate_picker_date: formate_picker_date,
    odd_spu: odd_spu,
    even_spu: even_spu,
    currentIndex: currentIndex,
    getProIndex: getProIndex,
});